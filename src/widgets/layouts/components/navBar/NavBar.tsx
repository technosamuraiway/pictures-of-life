import { useState } from 'react'

import { useLazyMeCurInfoQuery } from '@/services'
import { inctagramApi } from '@/services/api/inctagram.api'
import { useAppDispatch } from '@/services/store'
import { PATH, useLogout, useRouterLocaleDefinition } from '@/shared'
import {
  ActiveCreateIcon,
  ActiveFavoritesIcon,
  ActiveHomeIcon,
  ActiveMessengerIcon,
  ActiveProfileIcon,
  ActiveSearchIcon,
  ActiveStatisticsIcon,
  DefaultCreateIcon,
  DefaultFavoritesIcon,
  DefaultHomeIcon,
  DefaultMessengerIcon,
  DefaultProfileIcon,
  DefaultSearchIcon,
  DefaultStatisticsIcon,
  NavItem,
} from '@technosamurai/techno-ui-kit'
import { useRouter } from 'next/router'

import s from './NavBar.module.scss'

import { LogOutItem } from './logOutItem/LogOutItem'
import { NavBarItems } from './navBarItems/NavBarItems'

export function NavBar() {
  const [meDataLazy] = useLazyMeCurInfoQuery()

  const dispatch = useAppDispatch()

  const { handleLogout, isLoadingLogout } = useLogout()
  const t = useRouterLocaleDefinition()
  const router = useRouter()

  const [openModal, setOpenModal] = useState<boolean>(false)
  const [email, setEmail] = useState<string>('TestEmail@.com')

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const firstItems: NavItem[] = [
    {
      activeIconComponent: <ActiveHomeIcon />,
      altText: `${t.navBar.home} Icon`,
      defaultIconComponent: <DefaultHomeIcon />,
      hrefLink: PATH.HOME,
      id: 159,
      isDisabled: false,
      text: t.navBar.home,
    },
    {
      activeIconComponent: <ActiveCreateIcon />,
      altText: `${t.navBar.create} Icon`,
      defaultIconComponent: <DefaultCreateIcon />,
      hrefLink: PATH.CREATEPOST,
      id: 753,
      isDisabled: false,
      text: t.navBar.create,
    },
    {
      activeIconComponent: <ActiveProfileIcon />,
      altText: `${t.navBar.myProfile} Icon`,
      defaultIconComponent: <DefaultProfileIcon />,
      hrefLink: `${PATH.PROFILE.BASEPROFILE}/1370`,
      id: 456,
      isDisabled: false,
      text: t.navBar.myProfile,
    },
    {
      activeIconComponent: <ActiveMessengerIcon />,
      altText: `${t.navBar.messenger} Icon`,
      defaultIconComponent: <DefaultMessengerIcon />,
      hrefLink: '/messenger',
      id: 789,
      isDisabled: false,
      text: t.navBar.messenger,
    },
    {
      activeIconComponent: <ActiveSearchIcon />,
      altText: `${t.navBar.search} Icon`,
      defaultIconComponent: <DefaultSearchIcon />,
      hrefLink: '/Search',
      id: 123,
      isDisabled: false,
      text: t.navBar.search,
    },
  ]
  const secondItems: NavItem[] = [
    {
      activeIconComponent: <ActiveStatisticsIcon />,
      altText: `${t.navBar.statistics} Icon`,
      defaultIconComponent: <DefaultStatisticsIcon />,
      hrefLink: '/Statistics',
      id: 147,
      isDisabled: false,
      text: t.navBar.statistics,
    },
    {
      activeIconComponent: <ActiveFavoritesIcon />,
      altText: `${t.navBar.favorites} Icon`,
      defaultIconComponent: <DefaultFavoritesIcon />,
      hrefLink: '/Favorites',
      id: 258,
      isDisabled: false,
      text: t.navBar.favorites,
    },
  ]

  // ------ –†–∞–±–æ—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π -------
  const activeConditionFunctionHandler = (itemPath: string) => {
    if (itemPath === PATH.HOME) {
      return router.pathname === PATH.HOME
    } else {
      const trimmedPath = '/' + itemPath.split('/').slice(1, 2)

      return router.pathname.startsWith(trimmedPath) && router.pathname !== PATH.HOME
    }
  }

  // ------ –†–∞–±–æ—Ç–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º -------
  const onClickLogOutHandler = async () => {
    const result = await meDataLazy()

    if (result) {
      setEmail(result.data?.email as string)
      setOpenModal(true)
    }
  }

  const onClickModalPositiveButtonHandler = async () => {
    await handleLogout()

    /* üìõ –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–µ—à–∞ STORE üìõ
     * –∑–∞—á–µ–º –Ω—É–∂–Ω–æ? => –ø–æ—Å–ª–µ logout, —É –Ω–∞—Å –æ—Å—Ç–∞–µ—Ç—Å—è me-–∑–∞–ø—Ä–æ—Å –≤ –∫–µ—à–µ,
     * –∏ –∫–æ–≥–¥–∞ –º—ã —á–µ—Ä–µ–∑ routes –ø–µ—Ä–µ—Ö–æ–¥–∏–º –î–ê–ñ–ï –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     * me-–∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤ –∫–µ—à–µ...
     * => –¥–∞–∂–µ –ø–æ—Å–ª–µ logout –º—ã –º–æ–∂–µ–º –ø–æ—Å–µ—â–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     *
     * –ø–æ—á–µ–º—É –±—ã –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –í–ê–õ–ò–î–ê–¶–ò–ï–ô —Ç–µ–≥–æ–≤ –≤ RTK-query-api ['me']?
     * => –ø–æ—Ç–æ–º—É —á—Ç–æ Logout –∑–∞–ø—Ä–æ—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç => –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ –Ω–µ–≥–æ –Ω–µ –ø–æ–≤–µ—Å–∏—Ç—å */
    dispatch(inctagramApi.util.resetApiState())

    setOpenModal(false)
  }

  return (
    <nav className={s.wrapper}>
      <NavBarItems activeConditionFunction={activeConditionFunctionHandler} items={firstItems} />
      <NavBarItems
        activeConditionFunction={activeConditionFunctionHandler}
        items={secondItems}
        wrapperClassName={s.secondArrayWrapper}
      />
      <LogOutItem
        email={email}
        isDisableButtons={isLoadingLogout}
        isOpenModal={openModal}
        onClickLogOutBtn={onClickLogOutHandler}
        onClickModalPositiveButton={onClickModalPositiveButtonHandler}
        setOpenModal={setOpenModal}
      />
    </nav>
  )
}
