import { inctagramApi } from '@/services'
import {
  BaseQueryFn,
  FetchArgs,
  FetchBaseQueryError,
  fetchBaseQuery,
} from '@reduxjs/toolkit/query/react'
import { Mutex } from 'async-mutex'
import Router from 'next/router'

import { PATH } from '../../shared/utils/pathVariables'

/*
 * –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å Automatic re-authorization by extending fetchBaseQuery?
 * 1. –≤–∑—è—Ç—å –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
 *    https://redux-toolkit.js.org/rtk-query/usage/customizing-queries#automatic-re-authorization-by-extending-fetchbasequery
 * 2. —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mutex - $ pnpm i async-mutex
 *
 * */

/* üü£ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∑–∞ access-token => –Ω—É–∂–µ–Ω —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ */
type UpdateTokenResponseType = {
  data: { accessToken: string }
}

/* üü° Mutex –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ JavaScript –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
       —ç—Ç–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π,–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.
       —á—Ç–æ –¥–µ–ª–∞–µ—Ç mutex? => –µ—Å–ª–∏ —É–ø–∞–¥—É—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–≤–ø—Ä–æ—Å–æ–≤, —Ç–æ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –æ–ø—Ä–∞–≤–ª—è—Ç—å –ù–ï–°–ö–û–õ–¨–ö–û –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞,
       mutex –¥–æ–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ token, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç */
const mutex = new Mutex()

/* üü¢ baseQuery –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–∫–∞ request with headers, [ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ baseQueryWithReauth ] */
const baseQuery = fetchBaseQuery({
  baseUrl: process.env.NEXT_PUBLIC_INCTAGRAM_API_URL ?? 'https://inctagram.work/api',

  /* —Å–æ—Ö—Ä–∞–Ω—è–µ–º refresh-token –≤ cookies –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ */
  credentials: 'include',

  prepareHeaders: headers => {
    /* –¥–æ—Å—Ç–∞–µ–º accessToken –∏ –ø—Ä–µ–∫—Ä–∏–ø–ª—è–µ–º –µ–≥–æ –∫ headers */
    const token = localStorage.getItem('accessToken')

    if (token) {
      headers.set('Authorization', `Bearer ${token}`)
    }

    return headers
  },
})

/* üü¢baseQueryWithReauth - –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ baseQuery, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å - —É–ø–∞–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ 401 –æ—à–∏–±–∫–µ */
export const baseQueryWithReauth: BaseQueryFn<
  FetchArgs | string,
  unknown,
  FetchBaseQueryError
> = async (args, api, extraOptions) => {
  /* –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ mutex => –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–ø–∞–µ–º */
  await mutex.waitForUnlock()

  /* –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å */
  let result = await baseQuery(args, api, extraOptions)

  /* –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–ø–∞–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ 401 –æ—à–∏–±–∫–µ*/
  if (result.error && result.error.status === 401) {
    if (!mutex.isLocked()) {
      const release = await mutex.acquire()

      try {
        /* –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π access token –ø–æ refresh token */
        const refreshResult = (await baseQuery(
          {
            method: 'POST',
            url: '/v1/auth/update-tokens',
          },
          api,
          extraOptions
        )) as UpdateTokenResponseType

        if (refreshResult.data) {
          /* —Å–æ—Ö—Ä–∞–Ω–∞—è–µ–º –Ω–æ–≤—ã–π access token*/
          localStorage.setItem('accessToken', refreshResult.data.accessToken.trim())

          /* –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —É–ø–∞–ª –∏–∑-–∑–∞ —Å—Ç–∞—Ä–æ–≥–æ access token, —Ç–æ–ª—å–∫–æ —É–∂–µ —Å –Ω–æ–≤—ã–º access token*/
          result = await baseQuery(args, api, extraOptions)
        } else {
          /* –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ => –æ—á–∏—â–∞–µ–º —Å—Ç–æ—Ä*/
          inctagramApi.util.resetApiState()

          /* –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π access token, —Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏*/
          if (!result?.meta?.request.url.includes('v1/auth/me')) {
            await Router.push(PATH.AUTH.SIGNIN)
          }
        }
      } finally {
        /* –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ mutex => –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–ø–∞–µ–º */
        release()
      }
    } else {
      /* –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ mutex => –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–ø–∞–µ–º */
      await mutex.waitForUnlock()
      // result = await baseQuery(args, api, extraOptions)
    }
  }

  return result
}
