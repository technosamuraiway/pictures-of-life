import { toast } from 'react-toastify'

import { inctagramApi, useLogOutMutation } from '@/services'
import { useAppDispatch } from '@/services/store'
import { useRouter } from 'next/router'

import { PATH } from '../../utils'
import { useRouterLocaleDefinition } from '../useRouterLocaleDefinition'

type serverError = {
  status: number
}

export function useLogout() {
  const t = useRouterLocaleDefinition()
  const dispatch = useAppDispatch()
  const router = useRouter()
  const [
    logOut,
    { isError: isErrorLogout, isLoading: isLoadingLogout, isSuccess: isSuccessLogout },
  ] = useLogOutMutation()

  const logoutPurification = () => {
    localStorage.removeItem('accessToken')
    router.replace(PATH.AUTH.SIGNIN)
    dispatch(inctagramApi.util.resetApiState())
    toast.info(t.logOut.logOutSuccess)
  }

  const handleLogout = async () => {
    /* üìõ –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–µ—à–∞ STORE üìõ
     * –∑–∞—á–µ–º –Ω—É–∂–Ω–æ? => –ø–æ—Å–ª–µ logout, —É –Ω–∞—Å –æ—Å—Ç–∞–µ—Ç—Å—è me-–∑–∞–ø—Ä–æ—Å –≤ –∫–µ—à–µ,
     * –∏ –∫–æ–≥–¥–∞ –º—ã —á–µ—Ä–µ–∑ routes –ø–µ—Ä–µ—Ö–æ–¥–∏–º –î–ê–ñ–ï –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     * me-–∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤ –∫–µ—à–µ...
     * => –¥–∞–∂–µ –ø–æ—Å–ª–µ logout –º—ã –º–æ–∂–µ–º –ø–æ—Å–µ—â–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     *
     * –ø–æ—á–µ–º—É –±—ã –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –í–ê–õ–ò–î–ê–¶–ò–ï–ô —Ç–µ–≥–æ–≤ –≤ RTK-query-api ['me']?
     * => –ø–æ—Ç–æ–º—É —á—Ç–æ Logout –∑–∞–ø—Ä–æ—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç => –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ –Ω–µ–≥–æ –Ω–µ –ø–æ–≤–µ—Å–∏—Ç—å */

    /* –û—á–µ–Ω—å –≤–∞–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–º–µ–Ω–Ω–æ –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –æ—Ç–≤–µ—Ç–∞.

         –°—Ü–µ–Ω–∞—Ä–∏–π: –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å refreshToken –∏ –Ω–∞–∂–∞—Ç—å logout - accessToken –æ—Å—Ç–∞–Ω–µ—Ç—Å—è
         –∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É –ø—Ä–æ—Ö–æ–¥–∏—Ç—å...

         –ü–æ—á–µ–º—É —Ç–∞–∫? –≤–∏–¥–∏–º–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ - logout –Ω—É–∂–µ–Ω refreshToken –≤ cookie, –∞ –µ–≥–æ –Ω–µ—Ç */

    try {
      await logOut().unwrap()
      logoutPurification()
    } catch (error: unknown) {
      const serverError = error as serverError

      /* –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å –ø–æ—à—ë–ª –±–µ–∑ refreshToken */
      if (serverError?.status === 401) {
        logoutPurification()
      }
    }
  }

  return { handleLogout, isErrorLogout, isLoadingLogout, isSuccessLogout }
}
